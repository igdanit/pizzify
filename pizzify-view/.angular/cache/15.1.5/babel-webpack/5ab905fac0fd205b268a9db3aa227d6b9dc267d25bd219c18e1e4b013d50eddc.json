{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { retry } from 'rxjs';\nimport { getAuthToken } from 'src/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrderService {\n  constructor(http) {\n    this.http = http;\n    this.orders = [];\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: ''\n      })\n    };\n  }\n  // Fetch amount orders from API\n  getOrders(offset, amount) {\n    this.httpOptions.headers.set('Authorization', getAuthToken());\n    return this.http.get(`api/v1/order?offset=${offset}&amount=${amount}`, this.httpOptions).pipe(retry(2));\n  }\n  updateStatus(orderID, status) {\n    this.httpOptions.headers.set('Authorization', getAuthToken());\n    return this.http.patch(`api/v1/order/${orderID}`, {\n      status\n    }, this.httpOptions).pipe(retry(2));\n  }\n}\nOrderService.ɵfac = function OrderService_Factory(t) {\n  return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient));\n};\nOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrderService,\n  factory: OrderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAA+BC,KAAK,QAAoB,MAAM;AAC9D,SAASC,YAAY,QAAQ,WAAW;;;AAMxC,OAAM,MAAOC,YAAY;EAUvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IATxB,WAAM,GAAa,EAAE;IAErB,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIN,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClCO,aAAa,EAAE;OAChB;KACF;EAEsC;EAEvC;EACAC,SAAS,CAACC,MAAc,EAAEC,MAAc;IACtC,IAAI,CAACC,WAAW,CAACL,OAAO,CAACM,GAAG,CAAC,eAAe,EAAEV,YAAY,EAAE,CAAC;IAC7D,OAAO,IAAI,CAACG,IAAI,CAACQ,GAAG,CAClB,uBAAuBJ,MAAM,WAAWC,MAAM,EAAE,EAChD,IAAI,CAACC,WAAW,CACjB,CAACG,IAAI,CAACb,KAAK,CAAC,CAAC,CAAC,CAAC;EAClB;EAEAc,YAAY,CAACC,OAAe,EAAEC,MAAmB;IAC/C,IAAI,CAACN,WAAW,CAACL,OAAO,CAACM,GAAG,CAAC,eAAe,EAAEV,YAAY,EAAE,CAAC;IAC7D,OAAO,IAAI,CAACG,IAAI,CAACa,KAAK,CACpB,gBAAgBF,OAAO,EAAE,EACzB;MACEC;KACD,EACD,IAAI,CAACN,WAAW,CACjB,CAACG,IAAI,CAACb,KAAK,CAAC,CAAC,CAAC,CAAC;EAClB;;AA9BWE,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAgB,SAAZhB,YAAY;EAAAiB,YAFX;AAAM","names":["HttpHeaders","retry","getAuthToken","OrderService","constructor","http","headers","Authorization","getOrders","offset","amount","httpOptions","set","get","pipe","updateStatus","orderID","status","patch","factory","providedIn"],"sourceRoot":"","sources":["/home/igdanit/git/pizzify/pizzify-view/src/app/services/order.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Observer, retry, Subscriber } from 'rxjs';\nimport { getAuthToken } from 'src/utils';\nimport { IOrder, OrderStatus } from '../models/order';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n  orders: IOrder[] = []\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: ''\n    })\n  }\n\n  constructor(private http: HttpClient) {}\n\n  // Fetch amount orders from API\n  getOrders(offset: number, amount: number): Observable<IOrder[]> {\n    this.httpOptions.headers.set('Authorization', getAuthToken())\n    return this.http.get<IOrder[]>(\n      `api/v1/order?offset=${offset}&amount=${amount}`,\n      this.httpOptions\n    ).pipe(retry(2))\n  }\n\n  updateStatus(orderID: string, status: OrderStatus) {\n    this.httpOptions.headers.set('Authorization', getAuthToken())\n    return this.http.patch<IOrder>(\n      `api/v1/order/${orderID}`,\n      {\n        status\n      },\n      this.httpOptions\n    ).pipe(retry(2))\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}