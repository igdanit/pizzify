{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Observable, retry } from 'rxjs';\nimport { getHash } from '../../utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: ''\n      })\n    };\n  }\n  logIn(credentials, event) {\n    const passwordHash = getHash(credentials.password);\n    return this.http.post('/api/v1/auth/sign-in', {\n      username: credentials.username,\n      password: passwordHash\n    }, this.httpOptions).pipe(retry(5)).subscribe(response => {\n      window.localStorage.setItem('accessToken', response.token);\n      event();\n    });\n  }\n  handleError(err, caught) {\n    return new Observable(() => err);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,UAAU,EAAEC,KAAK,QAAQ,MAAM;AACxC,SAASC,OAAO,QAAQ,aAAa;;;AAMrC,OAAM,MAAOC,WAAW;EAStBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAPxB,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIP,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClCQ,aAAa,EAAE;OAChB;KACF;EAEsC;EAEvCC,KAAK,CAACC,WAA6B,EAAEC,KAAe;IAClD,MAAMC,YAAY,GAAGT,OAAO,CAACO,WAAW,CAACG,QAAQ,CAAC;IAClD,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CACnB,sBAAsB,EACtB;MACEC,QAAQ,EAAEL,WAAW,CAACK,QAAQ;MAC9BF,QAAQ,EAAED;KACX,EACD,IAAI,CAACI,WAAW,CACjB,CAACC,IAAI,CAACf,KAAK,CAAC,CAAC,CAAC,CAAC,CAACgB,SAAS,CAAEC,QAAQ,IAAG;MACrCC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEH,QAAQ,CAACI,KAAK,CAAC;MAC1DZ,KAAK,EAAE;IACT,CAAC,CAAC;EACJ;EAEAa,WAAW,CAACC,GAAQ,EAAEC,MAAW;IAC/B,OAAO,IAAIzB,UAAU,CAAC,MAAIwB,GAAG,CAAC;EAChC;;AA5BWrB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YAFV;AAAM","names":["HttpHeaders","Observable","retry","getHash","AuthService","constructor","http","headers","Authorization","logIn","credentials","event","passwordHash","password","post","username","httpOptions","pipe","subscribe","response","window","localStorage","setItem","token","handleError","err","caught","factory","providedIn"],"sourceRoot":"","sources":["/home/igdanit/git/pizzify/pizzify-view/src/app/services/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, retry } from 'rxjs';\nimport { getHash } from '../../utils';\nimport { ILogInResponse, IUserCredentials } from '../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: ''\n    })\n  }\n\n  constructor(private http: HttpClient) {}\n\n  logIn(credentials: IUserCredentials, event: ()=>void) {\n    const passwordHash = getHash(credentials.password);\n    return this.http.post<ILogInResponse>(\n      '/api/v1/auth/sign-in',\n      {\n        username: credentials.username,\n        password: passwordHash\n      },\n      this.httpOptions\n    ).pipe(retry(5)).subscribe((response)=>{\n      window.localStorage.setItem('accessToken', response.token)\n      event();\n    })\n  }\n\n  handleError(err: any, caught: any) {\n    return new Observable(()=>err)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}